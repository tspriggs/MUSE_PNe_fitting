## Model

def MUSE_3D_OIII(params, l, x_2D, y_2D, data):
    moffat_amp = params['moffat_amp']
    x_0 = params['x_0']
    y_0 = params['y_0']
    FWHM = params["FWHM"]
    beta = params["beta"]
    mean = params["mean"]
    Gauss_FWHM = params["Gauss_FWHM"]
    Gauss_bkg = params["Gauss_bkg"]
    Gauss_grad = params["Gauss_grad"]
    
    #Moffat model
    gamma = FWHM / (2. * np.sqrt(2.**(1./beta) - 1.))
    rr_gg = ((np.array(x_2D) - x_0)**2 + (np.array(y_2D) - y_0)**2) / gamma**2
    F_OIII_xy = moffat_amp * (1 + rr_gg)**(-beta)

    # This is to combine instrumental resolution, in FWHM, with doppler broadening, set Gauss_FWHM to 0.0 to just use instrumental only.
    comb_FWHM = np.sqrt(2.81**2 + Gauss_FWHM**2)
    Gauss_std = comb_FWHM / 2.35482
    
    # Convert Moffat flux to amplitude
    A_OIII_xy = ((F_OIII_xy) / (np.sqrt(2*np.pi) * Gauss_std))
    
    #Construct model gaussian profiles for each amplitude value in cube
    model_spectra = [(Gauss_bkg + (Gauss_grad * l) + np.abs(Amp) * np.exp(- 0.5 * (l - mean)** 2 / Gauss_std**2.) +
             (np.abs(Amp)/2.98) * np.exp(- 0.5 * (l - (mean - 47.9399))** 2 / Gauss_std**2.)) for Amp in A_OIII_xy]
    
    return model_spectra, [np.sum((F_OIII_xy) * 1e-20), np.std(data - model_spectra), np.max(A_OIII_xy), F_OIII_xy]

def MUSE_3D_residual(params, l, x_2D, y_2D, data, error, PNe_number, list_to_append_data):
    model = MUSE_3D_OIII(params, l, x_2D, y_2D, data)
    list_to_append_data.clear()
    list_to_append_data.append(model[1])

    return (data - model[0]) / error

## better extractor, can be used for both 1D and 2D data extraction
# for 1D, leave dim=1 and wave=None. used for extraction of PNe from 1D fit result data. i.e. flux maps, A/rN maps, single PNe 2D maps
# for 2D, set dim=2. and wave=wavelength - used to PNe minicube extractions - 3D

def PNextractor(x, y, n_pix, data, wave=None, dim=1.):
    x = round(x)
    y = round(y)
    if n_pix %2 == 1.0:
        offset = (0.5*n_pix)+0.5
    elif n_pix %2 == 0.0:
        offset = (0.5*n_pix)
    left_x = x - offset
    right_x = left_x + n_pix
    top_y = y - offset
    bottom_y = top_y + n_pix
    # select the spectra of interest
    from_data = data[int(top_y):int(bottom_y), int(left_x):int(right_x)]
    if dim == 1.0:
        return from_data.reshape(n_pix**2)
    if dim == 2.0:
        return from_data.reshape(n_pix**2, len(wave))

## PSF

# PSF model

def PSF_residuals(PSF_params, l, x_2D, y_2D, data, err):
    FWHM = PSF_params['FWHM']
    beta = PSF_params["beta"]
    Gauss_FWHM = PSF_params["Gauss_FWHM"]
    
    def generate_model(x, y, moffat_amp, FWHM, beta, Gauss_FWHM, Gauss_bkg, Gauss_grad, mean):
        gamma = FWHM / (2. * np.sqrt(2.**(1./beta) - 1.))
        rr_gg = ((np.array(x_2D) - x)**2 + (np.array(y_2D) - y)**2) / gamma**2
        F_OIII_xy = moffat_amp * (1 + rr_gg)**(-beta)
        
        comb_FWHM = np.sqrt(2.81**2 + Gauss_FWHM**2)
        Gauss_std = comb_FWHM / 2.35482
        
        A_OIII_xy = ((F_OIII_xy) / (np.sqrt(2*np.pi) * Gauss_std))
        
        model_spectra = [(Gauss_bkg + (Gauss_grad * l) + np.abs(Amp) * np.exp(- 0.5 * (l - mean)** 2 / Gauss_std**2.) +
             (np.abs(Amp)/2.98) * np.exp(- 0.5 * (l - (mean - 47.9399))** 2 / Gauss_std**2.)) for Amp in A_OIII_xy]
        
        return model_spectra
    
    list_of_models = {}
    for k in np.arange(0, len(data)):
        list_of_models["model_%d" %k] = generate_model(PSF_params["x_%d" %k], PSF_params["y_%d" %k], PSF_params["moffat_amp_%d" %k], FWHM, beta, Gauss_FWHM, PSF_params["gauss_grad_%d" %k], PSF_params["gauss_bkg_%d" %k], PSF_params["mean_%d" %k])
    
    resid = {}
    for m in np.arange(0, len(data)):
        resid["resid_%d" %m] = (data[m] - list_of_models["model_%d" %m]) / err[m]
    
    if len(resid) > 1.:
        return np.concatenate([resid[x] for x in sorted(resid)],1)
    else:
        return resid["resid_0"]
        
        
# Code required to run

# single use code

sel_PNe = PNe_df.nlargest(6, "A/rN").index.values

selected_PNe = PNe_spectra[sel_PNe]
selected_PNe_err = error_cube[sel_PNe] 

PSF_params = Parameters()
def model_params(p, n, amp, mean):
    p.add("moffat_amp_%d" %n, value=amp, min=0.01)
    p.add("x_%d" %n, value=n_pixels/2., min=0.01, max=n_pixels)
    p.add("y_%d" %n, value=n_pixels/2., min=0.01, max=n_pixels)
    p.add("mean_%d" %n, value=mean, min=4990., max=5070.)
    p.add("gauss_bkg_%d" %n, value=0.001, )#min=-200., max=1000., vary=True)
    p.add("gauss_grad_%d" %n, value=0.00001,)# min=-3., max=3., vary=True)


for i in np.arange(0,len(sel_PNe)):
        model_params(p=PSF_params, n=i, amp=200.0, mean=5035.0)    
    
PSF_params.add('FWHM', value=4.0, min=0.01, max=12., vary=True)
PSF_params.add("beta", value=4.0, min=0.01, max=12., vary=True) 
PSF_params.add("Gauss_FWHM", value=0.0, min=0.00001, max=3.0, vary=False) # LSF, instrumental resolution.

PSF_results = minimize(PSF_residuals, PSF_params, args=(wavelength, x_fit, y_fit, selected_PNe, selected_PNe_err), nan_policy="propagate")

print("FWHM: ",PSF_results.params["FWHM"].value, "+/-", PSF_results.params["FWHM"].stderr, "({:3.2f}%)".format((PSF_results.params["FWHM"].stderr/PSF_results.params["FWHM"].value)*100) )
print("Beta: ",PSF_results.params["beta"].value, "+/-", PSF_results.params["beta"].stderr, "({:3.2f}%)".format((PSF_results.params["beta"].stderr/PSF_results.params["beta"].value)*100) )
print("Gauss FWHM: ", PSF_results.params["Gauss_FWHM"].value, "+/-", PSF_results.params["Gauss_FWHM"].stderr, "({:3.2f}%)".format((PSF_results.params["Gauss_FWHM"].stderr/PSF_results.params["Gauss_FWHM"].value)*100) )


# code for FWHM and beta analysis with A/rN - code for running and plotting code underneath
# This will start with 1 PNe fit for PSF, then 2, then 3, then 4..... up to num_psf

num_psf=15 # change this to alter the maximum number of PNe used

fitted_FWHM = np.zeros(num_psf)
fitted_beta = np.zeros(num_psf)
A_rN_total = np.zeros(num_psf)
fitted_G_FWHM = np.zeros(num_psf)

#params = Parameters()
def model_params(p, n, amp, mean):
    PSF_params.add("moffat_amp_%d" %n, value=amp, min=0.001)
    PSF_params.add("x_%d" %n, value=n_pixels/2., min=0.001, max=n_pixels)
    PSF_params.add("y_%d" %n, value=n_pixels/2., min=0.001, max=n_pixels)
    PSF_params.add("mean_%d" %n, value=mean, min=4990., max=5060.)
    PSF_params.add("gauss_bkg_%d" %n, value=0.001)
    PSF_params.add("gauss_grad_%d" %n, value=0.00001)
    
for j in np.arange(0, num_psf):
    sel_PNe = PNe_df.nlargest(j+1, "A/rN").index.values
    selected_PNe = PNe_spectra[sel_PNe]
    selected_PNe_err = error_cube[sel_PNe]
    PSF_params = Parameters()
    for i in np.arange(0,len(sel_PNe)):
        model_params(p=PSF_params, n=i, amp=200.0, mean=5035.0)
    PSF_params.add('FWHM', value=4.0, min=0.001, max=12., vary=True)
    PSF_params.add("beta", value=4.0, min=0.001, max=12., vary=True) 
    PSF_params.add("Gauss_FWHM", value=0.0, min=0.01, max=3.0, vary=False)
    A_rN_total[j] = np.sqrt(np.sum(PNe_df.iloc[sel_PNe]["A/rN"]**2))
    results = minimize(PSF_residuals, PSF_params, args=(wavelength, x_fit, y_fit, selected_PNe, selected_PNe_err), nan_policy="propagate")
    fitted_FWHM[j] = results.params["FWHM"].value
    fitted_beta[j] = results.params["beta"].value
    fitted_G_FWHM[j] = results.params["Gauss_FWHM"].value
    
# plot with this code

plt.figure(figsize=(14,8))
plt.scatter(A_rN_total, fitted_FWHM, label="FWHM - PNe", c="blue")
plt.scatter(A_rN_total, fitted_beta, label="beta - PNe", c="red")
#plt.scatter(A_rN_total, fitted_G_FWHM, label="G_FWHM", c="k" )

plt.xlabel("A/rN")
plt.ylabel("FWHM and Beta")
plt.grid()
plt.axhline(np.median(fitted_FWHM[:]), label="FWHM - median", ls="dashed", c="blue")
plt.axhline(np.median(fitted_beta[:]), label="Beta - median", ls="dashed", c="red")
#plt.axhline(np.median(fitted_G_FWHM[:]), label="G_FWHM median", ls="dashed", c="k")

plt.legend()


## data read in, change as required:

# functions
# Open Fits file and assign to raw_data
hdulist = fits.open("FCC167_data/FCC167_OIII_line_center.fits")
hdr = hdulist[0].header
raw_data = hdulist[0].data
y_data = hdr["NAXIS2"]
x_data = hdr["NAXIS1"]
wavelength = np.exp(hdr['CRVAL3']+np.arange(hdr["NAXIS3"])*hdr['CDELT3'])
# swap axes to y,x,wavelength
raw_data_list = np.array(raw_data).reshape(len(wavelength), x_data*y_data)
raw_data_list = np.swapaxes(raw_data_list, 1, 0)
# Check for nan values
raw_data_list[np.isnan(raw_data_list)]=0.001
raw_data_cube = raw_data_list.reshape(y_data, x_data, len(wavelength))

#Read in x and y coordinates
x_y_list = np.load("exported_data/FCC167/sep_x_y_list.npy")
x_PNe = np.array([x[0] for x in x_y_list])
y_PNe = np.array([y[1] for y in x_y_list])

n_pixels=7
z = 0.006261

coordinates = [(n,m) for n in range(n_pixels) for m in range(n_pixels)]
x_fit = np.array([item[0] for item in coordinates])
y_fit = np.array([item[1] for item in coordinates])

flatten = lambda l: [item for sublist in l for item in sublist]

# Retrieve the respective spectra for each PNe source
PNe_spectra = np.array([PNextractor(x, y, n_pixels, raw_data_cube, wave=wavelength, dim=2.0) for x,y in zip(x_PNe, y_PNe)])


## parameter setup

PNe_params = Parameters()
PNe_params.add('moffat_amp', value=100., min=0.0001)
PNe_params.add('x_0', value=(n_pixels/2), min=0.01, max=n_pixels)
PNe_params.add('y_0', value=(n_pixels/2), min=0.01, max=n_pixels)
PNe_params.add("FWHM", value=3.9, vary=False)
PNe_params.add("beta", value=2.4, vary=False) 
PNe_params.add("mean", value=5035., min=4980, max=5070)
PNe_params.add("Gauss_FWHM", value=0., min=0.0001, max=3.0, vary=False) # LSF, instrumental resolution.
PNe_params.add("Gauss_bkg",  value=0.001)
PNe_params.add("Gauss_grad", value=0.00001)

FWHM_in_err = 0.0878573896825
beta_in_err = 0.0745887678586

## fit and store of things, don't forget to setup pandas dataframe for this

# useful value storage setup
total_Flux = np.zeros(len(x_PNe))
residuals_list = np.zeros(len(x_PNe))
A_OIII_list = np.zeros(len(x_PNe))
F_OIII_xy_list = np.zeros((len(x_PNe), len(PNe_spectra[0])))
M_amp_list = np.zeros(len(x_PNe))
mean_wave_list = np.zeros(len(x_PNe))

# error lists
moff_A_err = np.zeros(len(x_PNe))
x_0_err = np.zeros(len(x_PNe))
y_0_err = np.zeros(len(x_PNe))
mean_wave_err = np.zeros(len(x_PNe))

FWHM_list = np.zeros(len(x_PNe))
list_of_x = np.zeros(len(x_PNe))
list_of_y = np.zeros(len(x_PNe))
c = 299792458.0

for PNe_num in np.arange(0, len(x_PNe)):
    useful_stuff = []
    #run minimizer fitting routine
    results = minimize(MUSE_3D_residual, PNe_params, args=(wavelength, x_fit, y_fit, PNe_spectra[PNe_num], error_cube[PNe_num], PNe_num, useful_stuff), nan_policy="propagate")
    # store data in Pandas DF
    PNe_df.loc[PNe_num, "Total Flux"] = useful_stuff[0][0]
    
    # Store values in numpy arrays
    FWHM_list[PNe_num] = results.params["Gauss_FWHM"]
    residuals_list[PNe_num] = useful_stuff[0][1]
    A_OIII_list[PNe_num] = useful_stuff[0][2]
    F_OIII_xy_list[PNe_num] = useful_stuff[0][3]
    M_amp_list[PNe_num] = results.params["moffat_amp"]
    list_of_x[PNe_num] = results.params["x_0"]
    list_of_y[PNe_num] = results.params["y_0"]
    mean_wave_list[PNe_num] = results.params["mean"]
    #save errors
    moff_A_err[PNe_num] = results.params["moffat_amp"].stderr
    x_0_err[PNe_num] = results.params["x_0"].stderr
    y_0_err[PNe_num] = results.params["y_0"].stderr
    mean_wave_err[PNe_num] = results.params["mean"].stderr

# Signal to noise and Magnitude calculations
A_by_rN = A_OIII_list / residuals_list
PNe_df["A/rN"] = A_by_rN

de_z_means = mean_wave_list / (1 + z)

PNe_df["V (km/s)"] = (c * (de_z_means - 5007) / 5007) / 1000

def log_10(x):
    return np.log10(x)

PNe_df["m 5007"] = -2.5 * PNe_df["Total Flux"].apply(log_10) - 13.74
dM =  5. * np.log10(18.7) + 25   # 31.63
PNe_df["M 5007"] = PNe_df["m 5007"] - dM

#Plotting
plt.figure(1, figsize=(12,10))
info = plt.hist(PNe_df["M 5007"].loc[PNe_df["A/rN"]>2], edgecolor="black", linewidth=0.8, label="M 5007 >2 * A/rN", alpha=0.5)
#plt.hist(PNe_df["M 5007"].loc[PNe_df["A/rN"]<2], edgecolor="black",linewidth=0.8, color="red", alpha=0.5, label="M 5007 <2 * A/rN")
plt.xlim(-5,0)
#plt.title("Absolute Magnitude Histogram", fontsize=24)
plt.xlabel("$M_{5007}$", fontsize=24)
plt.ylabel("N Sources", fontsize=24)
#plt.legend(fontsize=15)
#plt.savefig("Plots/FCC167/M5007 histogram.png")
bins_cens = info[1][:-1]
print(PNe_df["M 5007"].min())
# this also plots a histogram of the PNe M5007 values

